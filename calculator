import math

class Calculator:
  def __init__(self, length):
    self.numbers = [0.0] * length
    
  def setNumber(self, index, value):
    self.numbers[index] = value
    
  def getNumber(self, index):
    return self.numbers[index]
    
  def clear(self):
    self.numbers = [0.0] * len(self.numbers)
    
  def add(self):
    raise NotImplementedError("Subclass must implement abstract method")
    
  def subtract(self):
    raise NotImplementedError("Subclass must implement abstract method")
    
  def multiply(self):
    raise NotImplementedError("Subclass must implement abstract method")
    
  def divide(self):
    raise NotImplementedError("Subclass must implement abstract method")

class BasicCalculator(Calculator):
  def __init__(self):
    super().__init__(2)
    
  def add(self):
    return self.getNumber(0) + self.getNumber(1)
    
  def subtract(self):
    return self.getNumber(0) - self.getNumber(1)
    
  def multiply(self):
    return self.getNumber(0) * self.getNumber(1)
    
  def divide(self):
    return self.getNumber(0) / self.getNumber(1)

    
